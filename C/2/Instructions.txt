===============================================================================
* Compile and run the example2.c script to see what it does:

# gcc -o example2 example2.c

Input:

# ./example2

Output:

The number is 5. Size of num1 is 4. Size of five is 1. Size of five_str is 8.
The sum of 5 and 3 is 8.
Subtracting 3 from 5 is 2.
The product of 5 and 3 is 15.

The division of 10.000000 by 3.000000 is 3.333333.
Too many zeros. How about this?
The division of 10 by 3 is 3.33.
The modulus of 10 and 3 is 1.
I have only $10.00 to my name.

num1 (5) and num2 (3) are not equal.
fnum1 (10.000000) divided by 2 is equal to num1 (5).
num2 (3) is less than num1 (5).

The fact is true.
Your opinion is false.

1 always has the truth.


===============================================================================
* Hand copy example2.c into a script called example2copy.c. Copy
everything including comments word for word. Make sure it runs as
example2.c does.

===============================================================================
* Fill in the code for example2comments.c

# cp example2comments.c example2code.c

Add the code into example2code.c and run it until it works as expected.


===============================================================================
* Fix the broken script.

# cp example2Broke.c example2fixed.c

Fix the example2fixed.c until it works like example2.c does. The best way to learn as much as you can while you fix it is to run the script after each fix you try. This way you will get to see what kind of error messages show up for each error there is.

===============================================================================
* Without reading any of the other files, create a new empty script that
implements these concepts:

- Show directive for setting interpreter.
- Set an integer and string. Print out the type of each variable.
- Print out difference between math function and concatenation formatting in string print outs.
- Show addition, subtraction, multiplication, division and modulus concepts with variables.
- Show casting from float to integer (optional if lang allows).
- Print out variables that require fixed decimal places.
- test.for greater than, less than, not equal and equal comparisons with numbers.
- test.not equal and equal comparisons with true/false values: literal true/false and test typical values like 1 or 0, empty strings, strings, etc.

This one should be called example2test.c. Make sure all are done correctly the first time checking your work carefully. Then run to find bugs. Fix them one at a time.


===============================================================================
* Clean up

# rm example2copy.c example2fixed.c example2code.c example2test.c